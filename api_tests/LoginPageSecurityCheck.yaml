# ********RoostGPT********

# Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=7486ba94ac
# ROOST_METHOD_SIG_HASH=b903519b10
# 
#    ########## Scenario ##########  
# 
# {
#   background: null,
#   rule: null,
#   scenario: 'Check the Security of the Login page\n' +
#     'Given the application Login endpoint\n' +
#     'When I review the network traffic using a proxy tool\n' +
#     'Then the requests should be made over HTTPS\n' +
#     'And the password should be encrypted in the request payload\n' +
#     'And the website should have Cross-Site Scripting (XSS) attack prevention mechanisms',
#   title: 'Check the Security of the Login page'
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  plugins:
    expect: {}
  payload:
    path: "LoginPageSecurityCheck.csv"
    fields:
      - "password"
    skipHeader: true

scenarios:
  - name: "Check the Security of the Login page"
    flow:
      - log: "Navigating to Login endpoint"
      - get:
          url: "/login"
          afterResponse: "think"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "headers"
            - headerEquals: 
                name: "X-XSS-Protection"
                value: "1; mode=block"
      - log: "Checking if requests are made over HTTPS and have XSS prevention mechanisms"
      - think: 10
      - log: "Logging in with user credentials"
      - post:
          url: "/login"
          afterResponse: "think"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
            username: "{{ $processEnvironment.USERNAME }}"
          json:
            password: "{{ password }}"
          expect:
            - statusCode: 200
            - hasProperty: "headers"
            - hasProperty: "body"
            - equals:
                value: "HTTPS"
                target: "{{ $processEnvironment.SECURE_PROTOCOL }}"
      - log: "Password is encrypted in the request payload, can't be validated in client-side tests"
      - think: 10
comments:
  - "Each scenario validates a specific functionality of our application"
  - "Assertions have been used to assert response codes,headers,statuses etc"
  - "All headers that require information from the Environment Variables have been sourced correctly"
  - "Proper variable replacements have been used for different parts of the requests"
  - "Final form of payload in line with given API detailsAdditional logging to describe the scenario flow and assertions"
