// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=7486ba94ac
ROOST_METHOD_SIG_HASH=b903519b10

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check the Security of the Login page\n' +
    'Given the application Login endpoint\n' +
    'When I review the network traffic using a proxy tool\n' +
    'Then the requests should be made over HTTPS\n' +
    'And the password should be encrypted in the request payload\n' +
    'And the website should have Cross-Site Scripting (XSS) attack prevention mechanisms',
  title: 'Check the Security of the Login page'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import io.restassured.http.Method;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.jupiter.api.*;
import static io.restassured.RestAssured.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

public class CheckSecurityLoginPageTest {

    private static BufferedReader reader;

    @BeforeEach
    public void setup() throws IOException {
        reader = new BufferedReader(new FileReader("src" + System.getProperty("file.separator") + "test" + System.getProperty("file.separator") + "java" + System.getProperty("file.separator") + "org" + System.getProperty("file.separator") + "agoncal" + System.getProperty("file.separator") + "application" + System.getProperty("file.separator") + "RoostTest" + System.getProperty("file.separator") + "CheckSecurityLoginPage.csv"));
        reader.readLine();  // Skipping the headers row
    }

    @AfterEach
    public void tearDown() throws IOException {
        reader.close();
    }

    @Test
    public void checkTheSecurityOfTheLoginPage() throws IOException, ParseException {

        String line;
        while ((line = reader.readLine()) != null) {
          
            if (line.isEmpty()) continue; // skip empty line

            String[] apiDetails = line.split("\\^\\|\\^");
            String methodType = apiDetails[0];
            String url = apiDetails[1];
            String headersRow = apiDetails[2];
            String requestBodyRow = apiDetails[3];
            int responseCode = Integer.parseInt(apiDetails[4]);
            String responseBody = apiDetails[5];

            // Initializing Headers
            HashMap<String, String> headers = new HashMap<>();
            if (!headersRow.equals("NA")) {
                JSONObject headersJson = (JSONObject) new JSONParser().parse(headersRow);
                for (Object key : headersJson.keySet()) {
                    headers.put((String) key, (String) headersJson.get(key));
                }
            }

            // Initializing Request Body
            JSONObject requestBody = null;
            if (!requestBodyRow.equals("NA")) {
                requestBody = (JSONObject) new JSONParser().parse(requestBodyRow);
            }

            RequestSpecification httpRequest = given().baseUri(url).headers(headers);
            if (requestBody != null) {
                httpRequest.body(requestBody.toJSONString());
            }

            // Sending Request
            Response response = httpRequest.request(Method.valueOf(methodType.toUpperCase()));

            assertEquals(responseCode, response.getStatusCode(), "Expected status code does not match the returned status code");

            // Asserting Response
            if (responseBody.contains("{")) {
                JSONObject expectedResponseBody = (JSONObject) new JSONParser().parse(responseBody);
                JSONObject actualResponseBody = (JSONObject) new JSONParser().parse(response.getBody().asString());

                assertEquals(expectedResponseBody, actualResponseBody);
            } else {
                assertTrue(response.getBody().asString().contains(responseBody), "Expected response body does not match the returned response body");
            }
        }
    }
}
