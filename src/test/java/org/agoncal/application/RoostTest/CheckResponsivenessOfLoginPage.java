// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=09592aa030
ROOST_METHOD_SIG_HASH=af038db8f3

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check the responsiveness of the login page\n' +
    'Given the frontend style sheets of the application\n' +
    'When I test the CSS using different screen sizes\n' +
    'Then The component styling should adjust according to screen size',
  title: 'Check the responsiveness of the login page'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CheckResponsivenessOfLoginPageTest {

    List<String[]> payloadData = new ArrayList<>();

    @BeforeEach
    public void setUp() throws Exception {
        String payloadFilePath = System.getProperty("user.dir") +
                Paths.get("src", "test", "java", "org", "agoncal", "application", "RoostTest", "CheckResponsivenessOfLoginPage.csv");

        List<String> allPayloadDataLines = Files.readAllLines(Paths.get(payloadFilePath));

        for (String payloadDataLine: allPayloadDataLines) {
            if (payloadDataLine.isEmpty()) continue;
            String[] rowPayloadData = payloadDataLine.split("\\^\\|\\^");
            payloadData.add(rowPayloadData);
        }
    }

    @Test
    public void checkResponsivenessOfLoginPage() {
        for (int i=1; i< payloadData.size(); i++) {
            String[] rowPayloadData = payloadData.get(i);
            String method = rowPayloadData[0];
            String url = rowPayloadData[1];
            String reqHeadersStr = rowPayloadData[2];
            String reqBody = rowPayloadData[3];
            int expectedResponseCode = Integer.parseInt(rowPayloadData[4]);
            String expectedResponseBody = rowPayloadData[5];

            RequestSpecification httpRequest = RestAssured.given();

            List<String> reqHeaders = Arrays.asList(reqHeadersStr.replace("{", "").replace("}", "").split(","));
            for (String header: reqHeaders) {
                String[] headerKeyValue = header.split(":");
                httpRequest.header(headerKeyValue[0], headerKeyValue[1]);
            }

            Response response = null;
            switch (method.toLowerCase()) {
                case "get":
                    response = httpRequest.get(url);
                    break;
                case "post":
                    httpRequest.body(reqBody);
                    response = httpRequest.post(url);
                    break;
                default: break;
            }

            assertEquals(expectedResponseCode, response.getStatusCode(), "Expected response code is different");

            assertEquals(expectedResponseBody, response.getBody().asString(), "Expected response body is different");
        }
    }
}
