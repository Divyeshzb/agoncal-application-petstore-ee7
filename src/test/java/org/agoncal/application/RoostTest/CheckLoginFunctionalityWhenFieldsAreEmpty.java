// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=e98ba82ecd
ROOST_METHOD_SIG_HASH=a9347404e8

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check the login functionality when fields are kept empty\n' +
    'Given the application login page is accessed\n' +
    "When I send a POST request with empty 'Username' and 'Password' fields\n" +
    'Then the response status should be 400\n' +
    "And the response body should contain 'Username and Password cannot be empty'",
  title: 'Check the login functionality when fields are kept empty'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import io.restassured.http.Headers;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.FileSystems;
import java.nio.file.Paths;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.hasEntry;
import static org.hamcrest.Matchers.equalTo;

public class CheckLoginFunctionalityWhenFieldsAreEmptyTest {
    RequestSpecification requestSpec;
    ResponseSpecification responseSpec;

    String filePath = Paths.get("src", "test", "java", "org", "agoncal", "application", "RoostTest", "CheckLoginFunctionalityWhenFieldsAreEmpty.csv").toString();

    @BeforeMethod
    public void setup() throws IOException {
        String currentLine;
        String[] currentLineData;

        // Initiate readers
        BufferedReader reader = new BufferedReader(new FileReader(filePath));

        // Skip header
        reader.readLine();

        // Iterate over lines
        while ((currentLine = reader.readLine()) != null) {
            if (currentLine.isEmpty()) continue;

            // Split and fetch data
            currentLineData = currentLine.split("\\^\\|\\^");

            // Initiate specs for the method
            requestSpec = new RequestSpecBuilder().setBaseUri(currentLineData[1])
                    .setHeaders(new Headers((Map<String, Object>) currentLineData[2]))
                    .setBody(currentLineData[3])
                    .build();

            responseSpec = new ResponseSpecBuilder().expectStatusCode(Integer.parseInt(currentLineData[4]))
                    .build();
        }

        // Close the stream
        reader.close();
    }

    @Test
    public void test_login_with_empty_fields() {
        given().spec(requestSpec).when().post().then().spec(responseSpec).and()
                .body("$", hasEntry("msg", equalTo("Username and Password cannot be empty")));
    }
}
