// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=51ceaf2eef
ROOST_METHOD_SIG_HASH=0526ac18c4

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check the Login Functionality with valid credentials\n' +
    "Given the application login page is accessed via the endpoint '/login'\n" +
    "When I send a POST request with valid 'Username' and 'Password'\n" +
    'Then the response status should be 200\n' +
    "And the response body should contain 'Login Successful'",
  title: 'Check the Login Functionality with valid credentials'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.restassured.RestAssured;
import io.restassured.http.Headers;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import java.util.*;
import java.nio.file.*;
import java.io.BufferedReader;
import java.io.IOException;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CheckLoginFunctionalityWithValidCredentialsTest {

    // ArrayList to store lines from payload.csv
    ArrayList<String> payloadContent;

    // Parameters to be used in test cases
    String method, url, reqHeaders, reqBody, responseCode, responseBody;

    @BeforeEach
    public void setUp() throws IOException {
        payloadContent = new ArrayList<>();

        // Reading payload.csv file
        Path path = Paths.get("src", "test", "java", "org", "agoncal", "application", "RoostTest", "CheckLoginFunctionalityWithValidCredentials.csv");
        BufferedReader reader = Files.newBufferedReader(path);

        // Storing lines to payloadContent
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.equals("")) continue;
            payloadContent.add(line);
        }

        reader.close();
    }

    @Test
    public void testLoginFunctionality() {
        for (int i = 1; i < payloadContent.size(); i++) {
            String[] splitLine = payloadContent.get(i).split("\\^\\|\\^");
            method = splitLine[0];
            url = splitLine[1];
            reqHeaders = splitLine[2].equals("{}") ? null : splitLine[2];
            reqBody = splitLine[3].equals("{}") ? null : splitLine[3];
            responseCode = splitLine[4];
            responseBody = splitLine[5];

            Map<String, String> headersMap = new HashMap<>();
            if (reqHeaders != null && !reqHeaders.equals("")) {
                String[] headers = reqHeaders.split(",");
                for (String header : headers) {
                    String[] headerDetails = header.split(":");
                    headersMap.put(headerDetails[0], headerDetails[1]);
                }
            }

            Response response;

            if (method.equals("POST")) {
                // Send POST request
                response = 
                    given().
                        headers(headersMap).
                        body(reqBody).
                    when().
                        post(url).
                    then().extract().response();
            } else {
                // Send GET request
                response = 
                    given().
                    when().
                        get(url).
                    then().extract().response();
            }

            // Validate response status code
            assertEquals(Integer.parseInt(responseCode), response.getStatusCode());

            // Validate response body
            JsonPath jsonPath = new JsonPath(response.asString());
            assertEquals(responseBody, jsonPath.getString("description"));
        } 
    }
}
