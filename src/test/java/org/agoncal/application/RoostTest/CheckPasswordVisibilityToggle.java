// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=51c8176ca9
ROOST_METHOD_SIG_HASH=53eac7059f

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check Password visibility toggle\n' +
    'Given the application login page is accessed\n' +
    "When I click on the 'Password Visibility' toggle\n" +
    "Then the 'Password' field type should be set to 'text'\n" +
    "When I click on the 'Password Visibility' toggle again\n" +
    "Then the 'Password' field type should be set to 'password'",
  title: 'Check Password visibility toggle'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import static org.testng.Assert.assertEquals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileReader;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;

import static io.restassured.RestAssured.given;

public class CheckPasswordVisibilityToggleTest {
    String dataFilePath;
    BufferedReader lineReader;
    Gson gson;

    @BeforeMethod
    public void getDataFile() throws IOException {
        gson = new GsonBuilder().create();
        Path rootPath = Paths.get("").toAbsolutePath();
        Path filePath = FileSystems.getDefault().getPath(rootPath.toString(),
                "src/test/java/org/agoncal/application/RoostTest/CheckPasswordVisibilityToggle.csv");
        dataFilePath = filePath.toString();
        lineReader = new BufferedReader(new FileReader(dataFilePath));
        lineReader.readLine();  // Skip header line
    }

    @Test
    public void testToggle() throws IOException {
        String line = "";
        while ((line = lineReader.readLine()) != null) {
            if (line.isEmpty()) {
                continue;
            }
            String[] payloadData = line.split("\\^\\|\\^");
            
            String method = payloadData[0];
            String url = payloadData[1];
            Map<String, Object> headers = gson.fromJson(payloadData[2], Map.class);
            Map<String, Object> requestBody = gson.fromJson(payloadData[3], Map.class);
            int expectedResponseCode = Integer.parseInt(payloadData[4]);
            String expectedResponseBody = payloadData[5];

            RequestSpecification request = given().headers(headers);
            if (requestBody != null){
                request.body(requestBody);
            }
            Response resp = request.request(method, url);

            assertEquals(resp.getStatusCode(), expectedResponseCode, "Incorrect response code received.");   

            // Parsing and validation of response body using JSONPath
            JsonPath jsonResp = resp.jsonPath();
            assertEquals(jsonResp.getString("msg"), gson.fromJson(expectedResponseBody, Map.class).get("msg"));
            
            // Nested Assertion to check all properties
            assertEquals(jsonResp.getString("headers"), gson.fromJson(expectedResponseBody, Map.class).get("headers"));
        }
    }

    @AfterMethod 
    public void cleanup() throws IOException {
        if(lineReader != null) {
            lineReader.close();
        }
    }
}
