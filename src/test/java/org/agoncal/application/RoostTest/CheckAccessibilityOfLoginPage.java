// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=40ad802c35
ROOST_METHOD_SIG_HASH=b68642b1eb

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check the accessibility of the Login page\n' +
    'Given the application login page\n' +
    'When I run an Accessibility testing tool\n' +
    'Then The page should conform to WCAG 2.1 level AA criteria',
  title: 'Check the accessibility of the Login page'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.nio.file.FileSystems;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import org.json.JSONObject;

public class CheckAccessibilityOfLoginPageTest {

    private Iterator<Object[]> testData;

    @BeforeEach
    public void setUp() throws IOException {
        String filePath = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "org" + FileSystems.getDefault().getSeparator() + "agoncal" + FileSystems.getDefault().getSeparator() + "application" + FileSystems.getDefault().getSeparator() + "RoostTest" + FileSystems.getDefault().getSeparator() + "CheckAccessibilityOfLoginPage.csv";
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        reader.readLine();  
        while (reader.ready()) {
            String line = reader.readLine(); 
            if (line.isEmpty()) continue;
            String[] parts = line.split("\\^\\|\\^"); 
            testData.add(new Object[] {parts[0], parts[1], new JSONObject(parts[2]), parts[3].isEmpty() ? null : new JSONObject(parts[3]), Integer.parseInt(parts[4]), new JSONObject(parts[5])});
        }
        reader.close();
    }

    @Test
    public void validateResponses() {
        while (testData.hasNext()) { 
            Object[] apiData = testData.next();
            
            Response response = given()
              .headers((JSONObject) apiData[2]) 
              .body((JSONObject) apiData[3]) 
            .when()
              .request((String) apiData[0], (String) apiData[1]) 
            .then()
              .assertThat()
              .statusCode((Integer) apiData[4]) 
              .and().extract().response();
            
            JsonPath actualBody = response.jsonPath();
            JSONObject expectedBody = (JSONObject) apiData[5];
            
            for (String key : expectedBody.keySet()) {
                response.then().body(key, equalTo(expectedBody.get(key))); 
            }
        }
    }
}
