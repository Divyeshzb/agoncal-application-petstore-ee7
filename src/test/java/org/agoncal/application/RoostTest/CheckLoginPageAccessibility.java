// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=85b0777313
ROOST_METHOD_SIG_HASH=26e9a76e35

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: 'Check if the Login page is accessible\n' +
    "Given the application homepage URL 'http://localhost:3000'\n" +
    "When I send a GET request to '/login'\n" +
    'Then the response status should be 200',
  title: 'Check if the Login page is accessible'
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.testng.annotations.BeforeEach;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.HashMap;

import static org.testng.Assert.assertEquals;

public class CheckLoginPageAccessibilityTest {

    private static String scenarioDataFile;

    @BeforeEach
    public void setUp() {
        scenarioDataFile = "src" + File.separator + "test" + File.separator +
                "java" + File.separator + "org" + File.separator + "agoncal" + File.separator +
                "application" + File.separator + "RoostTest" + File.separator + "CheckLoginPageAccessibility.csv";
    }

    @Test
    public void testLoginPageAccessible() throws IOException {

        BufferedReader br = new BufferedReader(new FileReader(scenarioDataFile));
        String line;
        String separator = System.getProperty("line.separator");
        
        // Skip the first row (headers)
        br.readLine();

        while ((line = br.readLine()) != null) {
            // Skip empty lines
            if (line.trim().length() == 0)
                continue;

            String[] apiTestData = line.split("\\^\\|\\^");

            // Parse the method, URL, request headers, request body, response code and response body
            String method = apiTestData[0];
            String url = apiTestData[1];
            String reqHeaders = apiTestData[2];
            String reqBody = apiTestData[3];
            int responseCode = Integer.parseInt(apiTestData[4]);
            String responseBody = apiTestData[5];

            // Make the request and get the response
            Response response;

            // If there are no request headers or body
            if (reqHeaders.length() == 0 && reqBody.length() == 0) {
                if (method.equals("GET")) {
                    response = RestAssured.get(url);
                    // Validate the response
                    assertEquals(response.statusCode(), responseCode, "Invalid status code");

                    /**
                     * As per the SCENARIO the response body is not being
                     * validated as "Then the response status should be 200"
                     * is the only assertion in it.
                     **/
                }
            }
        }

        br.close();
    }
}
