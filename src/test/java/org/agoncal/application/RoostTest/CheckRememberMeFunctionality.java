// ********RoostGPT********
/*
Test generated by RoostGPT for test lseg-integration using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=cb0deb2683
ROOST_METHOD_SIG_HASH=dafd1def42

 ########## Scenario ########## 

{
  background: null,
  rule: null,
  scenario: "Check the 'Remember Me' functionality\n" +
    'Given the application login page is accessed\n' +
    "And the 'Remember Me' checkbox is selected\n" +
    "When I send a POST request with valid 'Username' and 'Password'\n" +
    'Then the response status should be 200\n' +
    "And cookies should contain 'Username' and 'Password'",
  title: "Check the 'Remember Me' functionality"
}

*/

// ********RoostGPT********
package org.agoncal.application.RoostTest;

import io.restassured.http.Cookies;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CheckRememberMeFunctionalityTest {
    private String payloadFilePath = "src/test/java/org/agoncal/application/RoostTest/CheckRememberMeFunctionality.csv";
    private HashMap<String, String> reqHeaders;
    private String reqBody;
    private String url;
    private String method;
    private int responseCode;
    private String responseBody;

    @BeforeEach
    public void setUp() throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(payloadFilePath));
        String line;
        br.readLine(); // skip the header row
        while ((line = br.readLine()) != null && !line.isEmpty()) {
            String[] data = line.split("\\^\\|\\^");
            method = data[0];
            url = data[1];
            reqHeaders = JsonPath.from(data[2]).get("");
            reqBody = data[3];
            responseCode = Integer.parseInt(data[4]);
            responseBody = data[5];
        }
        br.close();
    }

    /**
     * Verify 'Remember Me' functionality.
     */
    @Test
    public void testRememberMeFunctionality() {
        if (method.equals("get")) {
            // Access the login page
            Response response = given()
                    .headers(reqHeaders)
                    .when()
                    .get(url)
                    .then().statusCode(responseCode)
                    .body(equalTo(responseBody))
                    .extract().response();

            assertEquals(response.statusCode(), responseCode, "Response status code is not as expected");
            assertEquals(response.getBody().asString(), responseBody, "Response body is not as expected");

            // Check if Cookies contain 'Username' and 'Password'
            Cookies cookies = response.getDetailedCookies();
            assertEquals(true, cookies.hasCookieWithName("Username"));
            assertEquals(true, cookies.hasCookieWithName("Password"));
        } else if (method.equals("post")) {
            // Send a POST request with valid 'Username' and 'Password'
            Response response = given()
                    .headers(reqHeaders)
                    .body(reqBody)
                    .when()
                    .post(url)
                    .then().statusCode(responseCode)
                    .body(equalTo(responseBody))
                    .extract().response();

            assertEquals(response.statusCode(), responseCode, "Response status code is not as expected");
            assertEquals(response.getBody().asString(), responseBody, "Response body is not as expected");

            // Check if Cookies contain 'Username' and 'Password'
            Cookies cookies = response.getDetailedCookies();
            assertEquals(true, cookies.hasCookieWithName("Username"));
            assertEquals(true, cookies.hasCookieWithName("Password"));
        }
    }
}
